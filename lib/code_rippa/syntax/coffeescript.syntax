---
scopeName: source.coffee
name: CoffeeScript
keyEquivalent: "^~C"
comment: 'CoffeeScript Syntax: version 1'
repository:
  instance_variable:
    patterns:
    - name: variable.other.readwrite.instance.coffee
      match: "(@)([a-zA-Z_\\$]\\w*)?"
  embedded_comment:
    patterns:
    - name: comment.line.number-sign.coffee
      captures:
        '1':
          name: punctuation.definition.comment.coffee
      match: "(?<!\\\\)(#).*$\\n?"
  numeric:
    patterns:
    - name: constant.numeric.coffee
      match: "(?<!\\$)\\b((0([box])[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?))\\b"
  variable_name:
    patterns:
    - name: variable.assignment.coffee
      captures:
        '1':
          name: variable.assignment.coffee
      match: "([a-zA-Z\\$_]\\w*(\\.\\w+)*)"
  single_quoted_string:
    patterns:
    - name: string.quoted.single.coffee
      begin: "'"
      endCaptures:
        '0':
          name: punctuation.definition.string.end.coffee
      beginCaptures:
        '0':
          name: punctuation.definition.string.begin.coffee
      end: "'"
      patterns:
      - name: constant.character.escape.coffee
        match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
  double_quoted_string:
    patterns:
    - name: string.quoted.double.coffee
      begin: "\""
      endCaptures:
        '0':
          name: punctuation.definition.string.end.coffee
      beginCaptures:
        '0':
          name: punctuation.definition.string.begin.coffee
      end: "\""
      patterns:
      - name: constant.character.escape.coffee
        match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
      - include: "#interpolated_coffee"
  interpolated_coffee:
    patterns:
    - name: source.coffee.embedded.source
      begin: "\\#\\{"
      captures:
        '0':
          name: punctuation.section.embedded.coffee
      end: "\\}"
      patterns:
      - include: "$self"
uuid: 5B520980-A7D5-4E10-8582-1A4C889A8DE5
firstLineMatch: "^#!.*\\bcoffee"
patterns:
- name: meta.inline.function.coffee
  comment: 'match stuff like: a -> â€¦ '
  captures:
    '1':
      name: variable.parameter.function.coffee
    '2':
      name: storage.type.function.coffee
  match: "(\\([^()]*?\\))\\s*([=-]>)"
- name: meta.class.instance.constructor
  captures:
    '1':
      name: keyword.operator.new.coffee
    '2':
      name: entity.name.type.instance.coffee
  match: "(new)\\s+(\\w+(?:\\.\\w*)*)"
- name: string.quoted.heredoc.coffee
  begin: "'''"
  endCaptures:
    '0':
      name: punctuation.definition.string.end.coffee
  beginCaptures:
    '0':
      name: punctuation.definition.string.begin.coffee
  end: "'''"
- name: string.quoted.double.heredoc.coffee
  begin: "\"\"\""
  endCaptures:
    '0':
      name: punctuation.definition.string.end.coffee
  beginCaptures:
    '0':
      name: punctuation.definition.string.begin.coffee
  end: "\"\"\""
  patterns:
  - name: constant.character.escape.coffee
    match: "\\\\."
  - include: "#interpolated_coffee"
- name: string.quoted.script.coffee
  begin: "`"
  endCaptures:
    '0':
      name: punctuation.definition.string.end.coffee
  beginCaptures:
    '0':
      name: punctuation.definition.string.begin.coffee
  end: "`"
  patterns:
  - name: constant.character.escape.coffee
    match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
- name: comment.block.coffee
  begin: "(?<!#)###(?!#)"
  captures:
    '0':
      name: punctuation.definition.comment.coffee
  end: "###(?:[ \\t]*\\n)"
  patterns:
  - name: storage.type.annotation.coffeescript
    match: "@\\w*"
- name: comment.line.number-sign.coffee
  captures:
    '1':
      name: punctuation.definition.comment.coffee
  match: "(#)(?!\\{).*$\\n?"
- name: string.regexp.coffee
  begin: "/{3}"
  end: "/{3}[imgy]{0,4}"
  patterns:
  - include: "#interpolated_coffee"
  - include: "#embedded_comment"
- name: string.regexp.coffee
  match: "/(?![\\s=/*+{}?]).*?[^\\\\]/[igmy]{0,4}(?![a-zA-Z0-9])"
- name: keyword.control.coffee
  match: "(?x)\n\t\t\t\t\\b(?<![\\.\\$])(\n\t\t\t\t\tbreak|by|catch|continue|else|finally|for|in|of|if|return|switch|\n\t\t\t\t\tthen|throw|try|unless|when|while|until|loop|do|(?<=for)\\s+own\n\t\t\t\t)(?!\\s*:)\\b\n\t\t\t"
- name: keyword.operator.coffee
  match: "(?x)\n\t\t\t\tand=|or=|!|%|&|\\^|\\*|\\/|(\\-)?\\-(?!>)|\\+\\+|\\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|\n\t\t\t\t>>>=|<>|<|>|!|&&|\\.\\.(\\.)?|\\?|\\||\\|\\||\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\n\t\t\t\t\\^=|\\b(?<![\\.\\$])(instanceof|new|delete|typeof|and|or|is|isnt|not)\\b\n\t\t\t"
- name: variable.assignment.coffee
  captures:
    '1':
      name: variable.assignment.coffee
    '4':
      name: punctuation.separator.key-value
    '5':
      name: keyword.operator.coffee
  match: "([a-zA-Z\\$_](\\w|\\$|\\.)*\\s*(?!\\::)((:)|(=))(?!(\\s*\\(.*\\))?\\s*((=|-)>)))"
- name: meta.variable.assignment.destructured.coffee
  begin: "(?<=\\s|^)([\\[\\{])(?=.*?[\\]\\}]\\s+[:=])"
  endCaptures:
    '0':
      name: keyword.operator.coffee
  beginCaptures:
    '0':
      name: keyword.operator.coffee
  end: "([\\]\\}]\\s*[:=])"
  patterns:
  - include: "#variable_name"
  - include: "#instance_variable"
  - include: "#single_quoted_string"
  - include: "#double_quoted_string"
  - include: "#numeric"
- name: meta.function.coffee
  captures:
    '2':
      name: entity.name.function.coffee
    '3':
      name: entity.name.function.coffee
    '4':
      name: variable.parameter.function.coffee
    '5':
      name: storage.type.function.coffee
  match: "(?x)\n\t\t\t\t(\\s*)\n\t\t\t\t(?=[a-zA-Z\\$_])\n\t\t\t\t(\n\t\t\t\t\t[a-zA-Z\\$_](\\w|\\$|:|\\.)*\\s*\n\t\t\t\t\t(?=[:=](\\s*\\(.*\\))?\\s*([=-]>))\n\t\t\t\t)\n\t\t\t"
- name: storage.type.function.coffee
  match: "[=-]>"
- name: constant.language.boolean.true.coffee
  match: "\\b(?<!\\.)(true|on|yes)(?!\\s*[:=])\\b"
- name: constant.language.boolean.false.coffee
  match: "\\b(?<!\\.)(false|off|no)(?!\\s*[:=])\\b"
- name: constant.language.null.coffee
  match: "\\b(?<!\\.)null(?!\\s*[:=])\\b"
- name: variable.language.coffee
  match: "\\b(?<!\\.)(super|this|extends)(?!\\s*[:=])\\b"
- name: meta.class.coffee
  captures:
    '1':
      name: storage.type.class.coffee
    '2':
      name: entity.name.type.class.coffee
    '3':
      name: keyword.control.inheritance.coffee
    '4':
      name: entity.other.inherited-class.coffee
  match: "(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?"
- name: keyword.other.coffee
  match: "\\b(debugger|\\\\)\\b"
- name: support.class.coffee
  match: "(?x)\\b(\n\t\t\t\tArray|ArrayBuffer|Blob|Boolean|Date|document|event|Function|\n\t\t\t\tInt(8|16|32|64)Array|Math|Map|Number|\n\t\t\t\tObject|Proxy|RegExp|Set|String|WeakMap|\n\t\t\t\twindow|Uint(8|16|32|64)Array|XMLHttpRequest\n\t\t\t)\\b"
- name: entity.name.type.object.coffee
  match: "\\b(console)\\b"
- name: support.function.console.coffee
  match: "((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b"
- name: support.function.coffee
  match: "(?x)\\b(\n\t\t\t\tdecodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require\n\t\t\t)\\b"
- name: support.function.method.array.coffee
  match: "(?x)((?<=\\.)(\n\t\t\t\tapply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|\n\t\t\t\tisPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|\n\t\t\t\treduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|\n\t\t\t\tunshift|valueOf\n\t\t\t))\\b"
- name: support.function.static.array.coffee
  match: "(?x)((?<=Array\\.)(\n\t\t\t\tisArray\n\t\t\t))\\b"
- name: support.function.static.object.coffee
  match: "(?x)((?<=Object\\.)(\n\t\t\t\tcreate|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|\n\t\t\t\tgetProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|\n\t\t\t\tisnt|keys|preventExtensions|seal\n\t\t\t))\\b"
- name: support.function.static.math.coffee
  match: "(?x)((?<=Math\\.)(\n\t\t\t\tabs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|\n\t\t\t\thypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|\n\t\t\t\ttan|tanh|trunc\n\t\t\t))\\b"
- name: support.function.static.number.coffee
  match: "(?x)((?<=Number\\.)(\n\t\t\t\tis(Finite|Integer|NaN)|toInteger\n\t\t\t))\\b"
- name: constant.language.coffee
  match: "\\b(Infinity|NaN|undefined)\\b"
- name: punctuation.terminator.statement.coffee
  match: "\\;"
- name: meta.delimiter.object.comma.coffee
  match: ",[ |\\t]*"
- name: meta.delimiter.method.period.coffee
  match: "\\."
- name: meta.brace.curly.coffee
  match: "\\{|\\}"
- name: meta.brace.round.coffee
  match: "\\(|\\)"
- name: meta.brace.square.coffee
  match: "\\[|\\]\\s*"
- include: "#instance_variable"
- include: "#single_quoted_string"
- include: "#double_quoted_string"
- include: "#numeric"
foldingStartMarker: "^\\s*class\\s+\\S.*$|.*(->|=>)\\s*$|.*[\\[{]\\s*$"
foldingStopMarker: "^\\s*$|^\\s*[}\\]]\\s*$"
fileTypes:
- coffee
- Cakefile
- coffee.erb
